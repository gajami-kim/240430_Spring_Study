<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="com.ezen.test.repository.BoardDAO">
  
  <insert id="insert" parameterType="com.ezen.test.domain.BoardVO">
  	insert into board (title,writer,content,has_file)
  	values (#{title},#{writer},#{content},#{has_file})
  </insert>
  
  <select id="getList" resultType="com.ezen.test.domain.BoardVO">
  	select * from board 
  	where isDel='N' 
  	<include refid="search"></include>
  	order by bno desc
  	limit #{pageStart}, #{qty}
  </select>
  
  <select id="getDetail" resultType="com.ezen.test.domain.BoardVO">
  	select * from board where bno = #{bno}
  </select>
  
  <update id="update">
  	update board set 
  	title=#{title}, 
  	content=#{content}, 
  	has_file=#{has_file}
  	read_count=read_count-2
  	where 
  	bno=#{bno}
  </update>
  
  <update id="isDel">
  	update board set isDel='Y' where bno=#{bno}
  </update>
  
  <update id="update_readCount">
  	update board set read_count = read_count+1 where bno=#{bno}
  </update>
  
  <select id="getTotal" resultType="int">
  	select count(bno) from board where isDel='N'
  	<include refid="search"></include>
  </select>
  
  <!-- 방금 들어간 bno를 줘(가장 최근에 들어가 숫자가 가장 큰 bno를 줘라) -->
  <select id="selectBno" resultType="int">
  	select max(bno) from board
  </select>
  
  <!-- 댓글 수 -->
  <update id="updateComment">
  	update board set cmt_qty = cmt_qty+#{cnt} where bno=#{bno}
  </update>
  
<!--   <update id="deleteComment">
  	update board set cmt_qty = cmt_qty-1 where bno=#{bno}
  </update> -->
  <!-- 댓글 수 -->
  
  <!-- 파일 수 -->
  <!-- <resultMap type="com.ezen.test.domain.FileVO" id="FileVOMap">
  	<id property="uuid" column="uuid"/>
  	<id property="save_dir" column="save_dir"/>
  	<id property="file_name" column="file_name"/>
  	<id property="file_type" column="file_type"/>
  	<id property="bno" column="bno"/>
  	<id property="file_size" column="file_size"/>
  	<id property="reg_date" column="reg_date"/>
  </resultMap>
  
  <resultMap type="com.ezen.test.domain.BoardVO" id="BoardVOMap">
  	<id property="bno" column="bno"/>
  	<id property="title" column="title"/>
  	<id property="writer" column="writer"/>
  	<id property="content" column="content"/>
  	<id property="isDel" column="isDel"/>
  	<id property="reg_date" column="reg_date"/>
  	<id property="read_count" column="read_count"/>
  	<id property="cmt_qty" column="cmt_qty"/>
  	<id property="has_file" column="has_file"/>
  </resultMap>
  
  <resultMap type="com.ezen.test.domain.BoardDTO" id="BoardDTOMap">
  	<collection property="bno" resultMap="BoardVOMap"></collection>
  	<collection property="uuid" resultMap="FileVOMap"></collection>
  </resultMap>
  
  <select id="updateFileCount" resultMap="BoardDTOMap">
  	select count(uuid) from file f
	join board b
	on b.bno = f.bno
	where b.bno=#{bno}; 
  </select> -->
  
  <update id="cmtCountupdate">
  	update board b set cmt_qty = (
	select count(bno) from comment where bno=b.bno)
  </update>
  
  <update id="fileCountupdate">
  	update board b set has_file = (
	select count(bno) from file where bno=b.bno)
  </update>
  
  <!-- 동적쿼리 -->
  <!-- select * from board where isDel='N' and title like %keyword% or content like %keyword% -->
  <!-- select * from board where isDel='N' and (... or ... or ...) -->
  <!-- collection 자리에 배열이나 리스트가 들어감 -->
  <!-- suffixOverrides : 가장 마지막에 붙은 "String"을 지워줘라(자리가 foreach가 모두 끝난(or이 모두 붙은) 이후여야함) -->
  <sql id="search">
	<if test="type != null">
		<trim prefix="and (" suffix=")" suffixOverrides="or">
			<foreach collection="typeToArray" item="type">
				<trim suffix="or">
					<choose>
						<when test="type=='t'.toString()">
							title like concat('%',#{keyword},'%')
						</when>
						<when test="type=='w'.toString()">
							writer like concat('%',#{keyword},'%')
						</when>
						<when test="type=='c'.toString()">
							content like concat('%',#{keyword},'%')
						</when>
					</choose>
				</trim>
			</foreach>
		</trim>
	</if> 	
  </sql>
  </mapper>
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  